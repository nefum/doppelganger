// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ownerId is a UUID from Supabase, format 00000000-0000-0000-0000-000000000000

enum DeviceState {
  USABLE
  SUSPENDED
  UNAVAILABLE
}

model Device {
  id      String @id @unique @default(cuid()) @map(name: "id")
  name    String @map(name: "name")
  ownerId String @map(name: "owner")

  // example: ubuntu:18.04@sha256:98706f0f213dbd440021993a82d2f70451a73698315370ae8615cc468ac06624
  redroidImage       String  @map(name: "redroid_image")
  redroidImageDigest String? @map(name: "redroid_image_digest")

  redroidFps    Int @map(name: "redroid_fps")
  redroidDpi    Int @map(name: "redroid_dpi")
  redroidWidth  Int @map(name: "redroid_width")
  redroidHeight Int @map(name: "redroid_height")

  redroidSecret String? @map(name: "redroid_secret")

  adbHostname String? @map(name: "adb_hostname") // if null, see getDefaultRedroidHostname
  adbPort     Int     @default(5555) @map(name: "adb_port")

  scrcpyHostname String? @map(name: "scrcpy_hostname") // if null, see getDefaultScrcpyHostname

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at")

  lastConnectedAt DateTime?   @map(name: "last_connected_at")
  lastState       DeviceState @default(USABLE) @map(name: "last_state")

  @@index([ownerId, id])
  @@map(name: "devices")
}

model StripeCustomer {
  id               String         @id @default(cuid())
  supabaseUserId   String         @unique
  stripeCustomerId String         @unique
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  Subscription     Subscription[]

  @@index([supabaseUserId, stripeCustomerId])
  @@map("stripe_customers")
}

// Optionally, you might want to track subscriptions as well
model Subscription {
  id                   String   @id @default(cuid())
  stripeCustomerId     String
  stripePriceId        String
  stripeSubscriptionId String   @unique
  status               String
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  customer StripeCustomer @relation(fields: [stripeCustomerId], references: [stripeCustomerId])

  @@index([stripeCustomerId, stripeSubscriptionId])
  @@map("subscriptions")
}
